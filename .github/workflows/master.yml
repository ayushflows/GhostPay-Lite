name: Build & Deploy to AWS App Runner via ECR

on:
  push:
    branches: [ "master" ]                     

permissions:
  contents: read                             
  id-token: write  

jobs:
  build-and-push:
    name: Build & Push Docker Image to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4       

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.IAM_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.IAM_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}  

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2     

      - name: Build, tag, and push Docker image
        run: |
          REPO_URI=${{ steps.login-ecr.outputs.registry }}/cicd-pipeline:latest
          docker build -t $REPO_URI .
          docker push $REPO_URI                   
          
      - name: Set image uri output
        run: echo "image_uri=${{ steps.login-ecr.outputs.registry }}/cicd-pipeline:latest" >> $GITHUB_OUTPUT
        id: set-image

  deploy:
    name: Deploy to AWS App Runner
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.IAM_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.IAM_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} 

      - name: Deploy to App Runner
        uses: awslabs/amazon-app-runner-deploy@main
        with:
          service: ghostpay          
          image: ${{ needs.build-and-push.outputs.image_uri }}
          access-role-arn: ${{ secrets.APP_RUNNER_ECR_ROLE_ARN }}  
          region: ${{ secrets.AWS_REGION }}
