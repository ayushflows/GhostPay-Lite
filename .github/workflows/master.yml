name: Build & Deploy to AWS App Runner via ECR

on:
  push:
    branches: [ "master" ]                     

permissions:
  contents: read                             
  id-token: write  

jobs:
  build-and-push:
    name: Build & Push Docker Image to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4       

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.IAM_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.IAM_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}  

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1             
          
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: cicd-pipeline
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"  

      - name: Deploy to App Runner Image
        id: deploy-apprunner
        uses: awslabs/amazon-app-runner-deploy@main
        with:
          service: app-runner-git-deploy-service
          image: ${{ steps.build-image.outputs.image }}
          access-role-arn: ${{ secrets.APP_RUNNER_ECR_ROLE_ARN }}
          region: ${{ secrets.AWS_REGION }}
          cpu : 1
          memory : 2
          # Deprecated: wait-for-service-stability: true
          # The new way to control service stability timeout
          wait-for-service-stability-seconds: 1200

      - name: Create .env file from GitHub secret
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: Convert .env to valid JSON array for App Runner
        run: |
          echo "[" > env-vars.json
          while IFS='=' read -r key value; do
            if [[ -z "$key" || "$key" == \#* ]]; then continue; fi
            esc_key=$(echo "$key" | sed 's/"/\\"/g')
            esc_value=$(echo "$value" | sed 's/"/\\"/g')
            echo "{\"Key\":\"$esc_key\",\"Value\":\"$esc_value\"}," >> env-vars.json
          done < .env
          sed -i '$ s/,$//' env-vars.json
          echo "]" >> env-vars.json

      - name: DEBUG: Print env-vars.json
        run: |
          echo "==== env-vars.json ===="
          cat env-vars.json
          echo "========================"

      - name: Create App Runner update-service JSON file
        run: |
            cat <<EOF > update.json
            {
              "ServiceArn": "${{ secrets.APP_RUNNER_SERVICE_ARN }}",
              "SourceConfiguration": {
                "ImageRepository": {
                  "ImageIdentifier": "${{ steps.build-image.outputs.image }}",
                  "ImageRepositoryType": "ECR"
                },
                "ImageConfiguration": {
                  "RuntimeEnvironmentVariables": $(cat env-vars.json)
                },
                "AutoDeploymentsEnabled": true
              }
            }
            EOF

      - name: DEBUG: Print update.json
        run: |
          echo "==== update.json ===="
          cat update.json
          echo "======================"

      - name: Update App Runner service with environment variables
        run: |
          aws apprunner update-service \
            --cli-input-json file://update.json \
            --region ${{ secrets.AWS_REGION }}

      - name: App Runner URL
        run: echo "App runner URL ${{ steps.deploy-apprunner.outputs.service-url }}" 
