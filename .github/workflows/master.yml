name: Build & Deploy to AWS App Runner via ECR

on:
  push:
    branches: [ "master" ]                     

permissions:
  contents: read                             
  id-token: write  

jobs:
  build-and-push:
    name: Build & Push Docker Image to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4       

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.IAM_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.IAM_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}  

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1             
          
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: cicd-pipeline
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"  
          
      # - name: Set image uri output
      #   run: echo "image_uri=${{ steps.login-ecr.outputs.registry }}/cicd-pipeline:latest" >> $GITHUB_OUTPUT
      #   id: set-image

      - name: Deploy to App Runner Image
        id: deploy-apprunner
        uses: awslabs/amazon-app-runner-deploy@main
        with:
          service: app-runner-git-deploy-service
          image: ${{ steps.build-image.outputs.image }}
          access-role-arn: ${{ secrets.APP_RUNNER_ECR_ROLE_ARN }}
          region: ${{ secrets.AWS_REGION }}
          cpu : 1
          memory : 2
          # Deprecated: wait-for-service-stability: true
          # The new way to control service stability timeout
          wait-for-service-stability-seconds: 1200

      - name: Create .env file from ENV_FILE secret
        run: |
          echo "${{ secrets.ENV }}" > .env

      - name: Convert .env file to App Runner-compatible JSON
        id: env-json
        run: |
          ENV_JSON="[$(sed -E 's/^([^=]+)=(.*)$/{"Key":"\1","Value":"\2"}/' .env | paste -sd, -)]"
          echo "env_json=$ENV_JSON" >> $GITHUB_OUTPUT

      - name: Update App Runner service with environment variables
        run: |
          aws apprunner update-service \
            --service-arn ${{ steps.deploy-apprunner.outputs.service-arn }} \
            --source-configuration ImageRepository={\
              ImageIdentifier="${{ steps.build-image.outputs.image }}",\
              ImageConfiguration={RuntimeEnvironmentVariables=${{ steps.env-json.outputs.env_json }}}} \
            --region ${{ secrets.AWS_REGION }}

      - name: App Runner URL
        run: echo "App runner URL ${{ steps.deploy-apprunner.outputs.service-url }}" 
